# Техническое задание (для разработчиков)

> Краткая цель проекта: одностраничный фронтенд-макет образовательной платформы по подписке (демонстрация внешнего вида и базового функционала без бэкенда). Позже планируется подключение бэкенда — всё проектировать с учётом дальнейшей интеграции.

---

## 1. Общая архитектура и ограничения

* Полностью фронтендное приложение (HTML/CSS/JS или SPA на фреймворке: React/Vue/Svelte — по выбору команды).
* Все данные временно — заглушки / заранее установленные JSON-данные и сохраняемые в `localStorage`.
* Аутентификация, оплата, формы (вакансии, контакт) — **заглушки**: симуляция успешного результата (модальные окна с подтверждением) без отправки на сервер. Должна быть очевидная точка интеграции для бэкенда в будущем.
* Поддержка двух языков интерфейса и материалов: **казахский** и **русский**. Переключение языка влияет на весь интерфейс и материалы курсов, кроме страницы задания — задания подготавливаются заранее в обоих языках и показываются в выбранном языке (при открытом задании переключение языка не требуется/не поддерживается).
* Сертификаты — генерируются клиент-сторонне из шаблона (три шаблона: KZ/RU/EN). При скачивании предоставляются отдельные PDF (три кнопки).
* Адаптивная верстка **не требуется** (малые экраны не приоритет), но архитектура должна позволять добавить адаптивность позже.

---

## 2. Список страниц / view-компонентов

1. **Главная (Landing, длинная one-page)**

   * Большой фон-баннер (hero) с анимированным печатающимся текстом в нижнем левом углу.
   * Навигация (в верхнем левом) — логотип, ссылки на якоря: Курсы / О нас / Цены / Вакансии / Проекты. При клике — скролл к секции.
   * Панель правее — смена языка, авторизация, регистрация.
   * Секция «Курсы» — горизонтальная карусель курсов (6 карточек видимо без прокрутки, далее горизонтальная прокрутка). При наведении карточки — пояснение (tooltip / overlay). Клик не переводит (договорились: перехода по карточке нет).
   * Секции: О нас, Цены, Вакансии (заглушка), Проекты учеников (заглушка).
   * В футере — контакты, копирайт.

2. **Страница "Мои курсы" (при входе — главная для авторизованного пользователя)**

   * Шапка: логотип, смена языка, кнопка «Выйти».
   * Блок «Мои курсы» — карточки начатых курсов с названием + «пройдено уроков / всего».
   * Блок «Доступные курсы» — карточки курсов, которые не начаты; карточки серые (неактивны).
   * Раздел «Пройденные» (отдельный раздел/вкладка) — хранит завершённые курсы.

3. **Страница курса**

   * Название курса, прогресс-бар (заполненность = модулей/заданий, определяется по `localStorage`/заглушкам).
   * Левая колонка: список модулей (каждый модуль — строка с названием + количество заданий). Каждый модуль содержит визуально ряд кружочков — один кружок = одно задание; галочка в кружочке = пройдено. Левая колонка скроллится отдельно.
   * Правее — основная область (миниатюра сертификата + подробности курса). Сертификат отображается в виде миниатюры (если курс завершён — доступна кнопка скачивания; если не завершён — миниатюра только для просмотра).
   * Навигация между модулями/заданиями — при клике в левой панели открывается модуль/задание в контексте (или по умолчанию открывается первый незавершённый).

4. **Страница модуля (учебная страница)**

   * Разбивка на **три колонки/части** (фиксированная одинаковая ширина, скроллятся независимо друг от друга):

     1. **Левая** — список заданий модуля (название модуля, список «Задание 1», «Задание 2»...). Пользователь может переключаться между заданиями.
     2. **Средняя** — текст задания: описание, возможные вставки видео/изображений.
     3. **Правая** — редактор кода (вкладки файлов для редактирования) + область вывода (ниже редактора) / или отдельная область вывода внизу правой колонки.
   * Внизу справа: кнопки **"Подсказка от ИИ"** и **"Далее"**.

     * "Подсказка" — открывает текстовую подсказку / частичный пример кода (в виде модального окна или разворачиваемого блока).
     * "Далее" — логика перехода: если текущее задание решено (автотест/проверка совпадает с эталоном), переходит на следующее задание; если это последнее задание модуля — на первое задание следующего модуля; если последний модуль+задание — на страницу «Мои курсы».

---

## 3. Поведение и логика (важные сценарии)

### 3.1 Авторизация / регистрация

* Реализовать как заглушку: форма ввода e-mail/имя/пароль → нажатие "Войти/Зарегистрироваться" сохраняет данные в `localStorage` и переводит в "авторизованное" состояние → редирект на «Мои курсы».
* При авторизации — в шапке заменить кнопки на профиль/выйти. Нет реальной проверки на сервере.

### 3.2 Подписки и оплата

* На этапе макета: карточки подписок с демонстрацией цены и кнопками:

  * Индивидуальная — 1 месяц — 4 999 ₸ — кнопка "Купить подписку" (заглушка — модальное окно с подтверждением).
  * Индивидуальная — 1 год — 49 999 ₸ — кнопка "Купить подписку" (заглушка).
  * Для образовательных учреждений — кнопка "Связаться с нами" — открывает модальную форму обратной связи (имя, название учреждения, телефон) — заглушка. Цена для учреждений не отображается.
* Важно: указать явную точку интеграции для бэкенда и платежного шлюза (например, endpoint `POST /api/purchase`), но в макете пока не реализуется.

### 3.3 Прогресс, автопроверка заданий

* Для каждого задания в исходных данных есть поле `expectedOutput` или `expectedHTML`.
* При исполнении кода студента проверка происходит на клиенте:

  * Сравнение результата (поправки: trim, нормализация пробелов, удаление служебных атрибутов) со значением эталона.
  * Разные типы ошибок → разные сообщения. Если ошибка не распознана — показывается "Неправильно. Повторите попытку".
* После удачной проверки: пометить задание как пройденное (обновить `localStorage`), отобразить галочку в кружочке, активировать переход "Далее".

### 3.4 Подсказки

* Кнопка "Подсказка" показывает заранее подготовленный текст/фрагмент кода. Подсказка не показывает финальное решение целиком.

### 3.5 Сертификаты

* Для каждого курса есть 3 шаблона PDF (KZ, RU, EN). При завершении курса в интерфейсе показывается миниатюра; по кнопке скачиваются соответствующие PDF-файлы (по отдельности — 3 кнопки: скачать KZ/RU/EN). Внутри PDF подставляются: ФИО ученика, дата завершения, название курса.
* Реализация: использование клиентской библиотеки (например, jsPDF/canvg/html2pdf) для генерации финального PDF на основе шаблона/HTML-шаблона. В макете — генерация client-side.

### 3.6 Вакансии и проекты учеников

* Изначально показываются заглушки с текстом.
* Дизайн должен предусматривать карточку вакансии и карточку проекта (включая скриншоты/ссылки).
* Вакансии: карточка + кнопка «Отклик» — открывает модальную форму (Имя, Контакт, Загрузка файла-резюме). Так как нет сервера — при загрузке файла показать имитацию отправки и локальное хранение в `localStorage` (или просто показывать сообщение "Спасибо, ваше резюме отправлено"). Ссылка на внешние проекты открывается в новой вкладке.

---

## 4. Данные / JSON-модели (предложение)

Используйте JSON-структуры, чтобы было легко заменить на API позже.

**Course**

```json
{
  "id": "course-web-1",
  "title": { "ru": "Web для начинающих", "kz": "Web бастауыштар үшін" },
  "stack": ["HTML","CSS","JavaScript"],
  "modules": ["module-1","module-2", "..."],
  "certificateTemplates": { "ru": "tmpl_ru.pdf", "kz": "tmpl_kz.pdf", "en": "tmpl_en.pdf" },
  "totalModules": 12
}
```

**Module**

```json
{
  "id": "module-1",
  "courseId": "course-web-1",
  "title": { "ru": "Модуль 1. Hello, World!", "kz": "..." },
  "assignments": ["a1","a2","a3"]
}
```

**Assignment**

```json
{
  "id": "a1",
  "moduleId": "module-1",
  "title": { "ru": "Задание 1", "kz": "..." },
  "description": { "ru": "...", "kz": "..." },
  "files": [{ "path": "index.html", "content": "<!doctype...>" }],
  "expectedOutputType": "html"|"console",
  "expectedOutput": "<div>Hello</div>", 
  "hint": { "ru": "Подсказка...", "kz": "..." }
}
```

**UserProgress** (в `localStorage`)

```json
{
  "userId": "user-123",
  "courseProgress": {
    "course-web-1": {
      "module-1": { "a1": true, "a2": false },
      "module-2": { ... }
    }
  },
  "subscriptions": ["monthly","yearly"]
}
```

---

## 5. UI / дизайн-детали (точные требования)

* **Hero**: фоновое изображение, снизу слева — текст, появляющийся эффектом печати (типичная реализация: CSS + JS для печатающегося текста).
* **Навигация**: фикcированная шапка. Верхний левый блок — логотип + ссылки (якоря). Верхний правый — переключатель языка (ру/каз), кнопки вход/регистрация.
* **Карусель курсов**: минималистичные карточки; на стандартном desktop экране помещается **6 карточек** без горизонтального скролла, далее горизонтальная прокрутка (overflow-x). Карточки: название, стэк (теги), количество модулей. Hover → overlay с кратким описанием. Card click — **не** ведёт на страницу курса (по договорённости).
* **Карточки в Моих курсах**: показывать прогресс (число пройденных/всех).
* **Страница курса**: левая колонка фиксированной ширины, центральная/правая колонки — деление пространства по макету; прогресс-бар под заголовком.
* **Страница модуля**: три колонки фиксированной одинаковой ширины, каждая со своим вертикальным скроллом. В редакторе — вкладки файлов. В области вывода — предпросмотр HTML/консоль.
* **Кнопки сертификатов**: в блоке сертификата 3 кнопки: "Скачать (KZ)", "Скачать (RU)", "Скачать (EN)".
* **Вакансии/проекты**: дизайн карточек под будущее наполнение (скриншот, заголовок, краткое описание, метаданные, кнопка/ссылка). Проекты — ссылки открывать в новой вкладке.

---

## 6. Ошибки, валидация и сообщения

* При неуспешной автопроверке: показывать специфическое сообщение, если ошибка распознана (например, "Ожидался вывод X, получено Y"). Если нет — "Неправильно. Повторите попытку".
* Форма регистрации/входа: простая валидация полей. При заглушечном входе — показать модальное подтверждение.
* При попытке скачать сертификат до завершения курса — кнопка неактивна с подсказкой "Курс не завершён".
* При успешном отклике на вакансию — показать всплывающее подтверждение.

---

## 7. Технологические рекомендации (реализация)

* SPA (React/Vue) предпочтительна для удобства локального хранения и переключения языков. Но можно и чистый HTML/CSS/JS.
* Локальное хранилище: `localStorage` для состояния пользователя и прогресса. Структура JSON (см. выше).
* PDF-генерация: jsPDF/html2pdf/canvg для генерации PDF-сертификата клиент-стороны. Шаблон PDF — хранится в проекте.
* Code editor: встроенный редактор типа **Monaco Editor** или **CodeMirror** (поддержка вкладок файлов). Для макета можно использовать простой `<textarea>` с подсветкой, но лучше — CodeMirror/Monaco для реалистичности.
* Автопроверка: запуск кода в sandboxed `iframe` (для HTML/CSS/JS) и сравнение `innerHTML` / console output с эталоном. Для node/PHP/Python задания — на макете реализовать заглушку (или эмуляцию) — но в спецификации указано, что на начальном этапе курсы: HTML/CSS/JS; остальные (PHP, Python, SysAdmin, Data Science) могут быть статичными или демонстрационными.
* i18n: использовать стандарт (i18next или аналог) с ресурсными файлами RU/KZ. Задания подготавливаются заранее в обеих локализациях.

---

## 8. Файлы/ресурсы (что подготовить дизайнерам/верстальщикам)

* Логотип в векторе (SVG), фавикон.
* Фоновая hero-картинка в высоком разрешении.
* Шаблоны сертификатов (в трёх языках) — PDF/PSD/AI или HTML шаблоны.
* Иконки/скриншоты для карточек курсов (если имеются).
* Тексты: «О нас», краткие описания курсов, тексты заглушек для вакансий и проектов. Все тексты в двух языках.

---

## 9. Acceptance Criteria (критерии приёмки макета)

1. Landing показывает все секции и навигация по якорям работает.
2. Секция «Курсы» — горизонтальная карусель, 6 видимых карточек на стандартном десктопе. Hover показывает пояснение.
3. При незалогиненом пользователе: кнопки вход/регистрация доступны; авторизация — заглушка, по успешной — редирект на «Мои курсы».
4. «Мои курсы»: отображение начатых и доступных курсов, правильная индикация прогресса (синхронизирована с `localStorage`). Есть раздел «Пройденные».
5. Страница курса: левая колонка модулей с кружочками-заданиями, прогресс-бар отображает прогресс. Миниатюра сертификата присутствует; при завершении — активны 3 кнопки скачивания сертификата.
6. Страница модуля: три фиксированных колонки с независимой прокруткой; редактор и вывод работают (выполнение HTML/JS/CSS в iframe). Кнопка "Подсказка" показывает заготовку; "Далее" следует логике перехода.
7. Вакансии/Проекты: отображение заглушек; дизайн карточек предусмотрен; отклик на вакансию вызывает модал с формой (имя/контакт/файл) и симуляцией отправки.
8. Все интерфейсы имеют русскую и казахскую локализацию; задачи подготовлены на двух языках; переключение языка корректно меняет интерфейс и материалы (за исключением открытого задания, где переключение не требуется).

---

# Текстовое описание (для нетехнического специалиста)

Это одностраничный макет учебной платформы для начинающих программистов. Он показывает, как будет выглядеть и как будет работать ваш сайт до того, как мы подключим сервер и реальные платежи. Главные моменты:

* Сайт двуязычный — на казахском и русском. Пользователь может выбрать язык в шапке.
* Главная страница — длинная презентационная страница с разделами: Курсы, О нас, Цены, Вакансии, Проекты наших учеников. На ней крупный баннер и текст, который как будто печатается (анимация).
* Секция «Курсы» — слева направо идут карточки курсов (видно 6 на экране), можно прокрутить дальше. При наведении мышью показывается краткое описание.
* Если пользователь входит в аккаунт (даже тестовый — пока без реального сервера), его главной страницей становится «Мои курсы». Там видно курсы, которые он начал, и курсы, которые доступны.
* В каждом курсе есть модули и в них — задания. Интерфейс обучения разделён на три части: список заданий, текст задания и рабочая область (где студент пишет код и сразу видит результат). Это позволяет пробовать и проверять код прямо в браузере.
* Каждое задание имеет правильный ответ (эталон). Когда ученик запускает код, система сравнивает результат с эталоном: если совпадает — задание помечается как выполненное и появляется возможность перейти дальше. Если нет — выводится понятное сообщение об ошибке или общее "Неправильно. Повторите попытку".
* Кнопка «Подсказка от ИИ» даёт текстовую подсказку или частичный пример кода (это заглушка сейчас — не реальная интеграция с ИИ). Кнопка «Далее» переходит к следующему заданию согласно описанной логике (вплоть до перехода на страницу курсов при окончании курса).
* По окончании курса ученик получает сертификат. На макете предполагается 3 версии сертификата (каз/рус/англ). На странице курса показывается миниатюра сертификата; после завершения можно скачать PDF-файлы каждой языковой версии (по отдельной кнопке).
* Разделы «Вакансии» и «Проекты учеников» сейчас пустые — там отображаются заглушки и тексты. В будущем будут карточки с описаниями, скриншотами, ссылками. На вакансии предусмотрена кнопка отклика: модальное окно с формой (имя, контакты, загрузить резюме) — сейчас форма просто моделирует отправку.
* Раздел «Цены» содержит три варианта подписки: месячная, годовая и для образовательных учреждений (для учреждений цена сейчас **не указана**, есть форма связи).
* На этапе макета не предусматривается мобильное оформление (фокус на desktop), адаптивность можно добавить позже.
* Важное практическое: сейчас всё работает без настоящего сервера — для демонстрации используются заготовки и локальное хранение. Позже всё это легко подключить к настоящему бэкенду (оплаты, хранение прогресса на сервере, хранение резюме, реальные вакансии и проекты).

---

Если нужно, я могу:

* Сверстать краткий одностраничный прототип в виде набора экранов/компонентов (Figma-стайл) — список компонентов и состояния готов;
* Подготовить финальную спецификацию в формате PDF/Markdown для передачи дизайнеру/верстальщику;
* Сформировать список приоритетных задач для разработки (MVP backlog).

Напишите, что предпочитаете — подготовлю следующее артефакт.
